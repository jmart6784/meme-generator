{"version":3,"sources":["components/Memu.js","components/MemeGenerator.js","App.js","index.js"],"names":["Memu","props","memeJsx","JSON","parse","allMemes","map","meme","className","onClick","sm","id","src","url","height","width","alt","name","MemeGenerator","useState","memes","setMemes","loading","setLoading","currentMeme","setCurrentMeme","topText","bottomText","textSize","forms","setForms","useEffect","fetch","then","response","json","data","myMin","myMax","undefined","length","Math","floor","random","ceil","handleForm","event","target","value","parseInt","type","placeholder","onChange","memeDiv","document","getElementById","html2canvas","useCORS","scrollX","window","scrollY","windowWidth","documentElement","offsetWidth","windowHeight","offsetHeight","canvas","uri","filename","link","createElement","download","href","body","appendChild","click","removeChild","open","saveAs","toDataURL","style","fontSize","stringify","meme_id","forEach","scroll","top","left","behavior","App","ReactDOM","render","StrictMode"],"mappings":"8LA4BeA,EA1BF,SAACC,GACZ,IAEMC,EAFMC,KAAKC,MAAMH,EAAMI,UAEPC,KAAI,SAACC,GACzB,OACE,sBAAKC,UAAU,WAAyBC,QAAS,kBAAMR,EAAMS,GAAGH,EAAKI,KAArE,UACE,qBACEH,UAAU,cACVI,IAAKL,EAAKM,IACVC,OAAQP,EAAKO,OACbC,MAAOR,EAAKQ,MACZC,IAAI,SAEN,mBAAGR,UAAU,YAAb,SAA0BD,EAAKU,SARFV,EAAKI,OAaxC,OACE,sBAAKH,UAAU,iBAAf,UACE,mBAAGA,UAAU,aAAb,gCACA,qBAAKA,UAAU,WAAf,SAA2BN,Q,gBC4KlBgB,EA/LO,WAAO,IAAD,EACAC,mBAAS,IADT,mBACnBC,EADmB,KACZC,EADY,OAEIF,oBAAS,GAFb,mBAEnBG,EAFmB,KAEVC,EAFU,OAGYJ,mBAAS,IAHrB,mBAGnBK,EAHmB,KAGNC,EAHM,OAIAN,mBAAS,CACjCO,QAAS,GACTC,WAAY,GACZC,SAAU,OAPc,mBAInBC,EAJmB,KAIZC,EAJY,KA8B1BC,qBAAU,WACRC,MAAM,qCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GACLb,EAASa,EAASE,KAAKhB,YAE1B,IAGHW,qBAAU,WA7BW,IAACM,EAAOC,OA8BbC,IAAVnB,GAAwC,IAAjBA,EAAMoB,QAC/Bf,EAAeL,GA/BGiB,EA+BgB,EA/BTC,EA+BYlB,EAAMoB,OAAS,EA9B/CC,KAAKC,MACVD,KAAKE,UAAYF,KAAKG,KAAKN,GAASG,KAAKC,MAAML,GAAS,GAAKA,QA+B9D,CAACjB,IAGJW,qBAAU,WACmB,kBAAhBP,GACTD,GAAW,KAEZ,CAACC,IAGJ,IAAMqB,EAAa,SAACC,GAAW,IAAD,EACJA,EAAMC,OAAtB9B,EADoB,EACpBA,KAAM+B,EADc,EACdA,MAED,aAAT/B,EAEEgC,SAASD,IAAU,IAAMC,SAASD,IAAU,IAC9ClB,EAAS,2BACJD,GADG,kBAELZ,EAAO+B,KAIZlB,EAAS,2BACJD,GADG,kBAELZ,EAAO+B,MAsCd,OAAK1B,EA+ED,qBAAKd,UAAU,cAAf,SACE,8CA9EF,sBAAKG,GAAG,qBAAR,UACE,qBAAKA,GAAG,UAAR,SACE,oBAAIA,GAAG,aAAP,8BAGF,sBAAKH,UAAU,kBAAf,UACE,wBAAOA,UAAU,aAAjB,sBAEE,uBACEA,UAAU,aACV0C,KAAK,OACLC,YAAY,WACZlC,KAAK,UACL+B,MAAOnB,EAAMH,QACb0B,SAAUP,OAId,wBAAOrC,UAAU,aAAjB,yBAEE,uBACEA,UAAU,aACV0C,KAAK,OACLC,YAAY,cACZlC,KAAK,aACL+B,MAAOnB,EAAMF,WACbyB,SAAUP,OAId,wBAAOrC,UAAU,aAAjB,uBAEE,uBACE0C,KAAK,SACLjC,KAAK,WACL+B,MAAOnB,EAAMD,SACbwB,SAAUP,EACVrC,UAAU,kBAId,wBAAQA,UAAU,SAASC,QAzDlB,WACf,IAAM4C,EAAUC,SAASC,eAAe,aAExCC,IAAYH,EAAS,CACnBI,SAAS,EACTC,SAAUC,OAAOD,QACjBE,SAAUD,OAAOC,QACjBC,YAAaP,SAASQ,gBAAgBC,YACtCC,aAAcV,SAASQ,gBAAgBG,eACtChC,MAAK,SAACiC,IA3BI,SAACC,EAAKC,GACnB,IAAIC,EAAOf,SAASgB,cAAc,KAEL,kBAAlBD,EAAKE,UACdF,EAAKG,KAAOL,EACZE,EAAKE,SAAWH,EAEhBd,SAASmB,KAAKC,YAAYL,GAE1BA,EAAKM,QAELrB,SAASmB,KAAKG,YAAYP,IAE1BV,OAAOkB,KAAKV,GAeZW,CAAOZ,EAAOa,YAAa,gBA+CvB,yBAKF,sBAAKpE,GAAG,YAAR,UACE,mBACEA,GAAG,WACHH,UAAU,YACVwE,MAAO,CAAEC,SAAS,GAAD,OAAKpD,EAAMD,SAAX,OAHnB,SAKGC,EAAMH,UAGT,mBACEf,GAAG,cACHH,UAAU,YACVwE,MAAO,CAAEC,SAAS,GAAD,OAAKpD,EAAMD,SAAX,OAHnB,SAKGC,EAAMF,aAGT,qBACEnB,UAAU,aACVI,IAAKY,EAAYX,IACjBC,OAAQU,EAAYV,OACpBC,MAAOS,EAAYT,MACnBC,IAAI,YAIR,cAAC,EAAD,CAAMX,SAAUF,KAAK+E,UAAU9D,GAAQV,GAnK1B,SAACyE,GAClB/D,EAAMgE,SAAQ,SAAC7E,GACTA,EAAKI,KAAOwE,IACd1D,EAAelB,GACfoD,OAAO0B,OAAO,CACZC,IAAK,EACLC,KAAM,EACNC,SAAU,sBChBLC,EATH,WACV,OACE,gCACE,qBAAKjF,UAAU,mBACf,cAAC,EAAD,QCFNkF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtC,SAASC,eAAe,W","file":"static/js/main.c6a4c3d1.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Memu = (props) => {\n  let memes = JSON.parse(props.allMemes);\n\n  const memeJsx = memes.map((meme) => {\n    return (\n      <div className=\"meme-div\" key={meme.id} onClick={() => props.sm(meme.id)}>\n        <img\n          className=\"meme-image2\"\n          src={meme.url}\n          height={meme.height}\n          width={meme.width}\n          alt=\"meme\"\n        />\n        <p className=\"meme-name\">{meme.name}</p>\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"memu-container\">\n      <p className=\"memu-title\">Select Meme ·êÅ</p>\n      <div className=\"memu-div\">{memeJsx}</div>\n    </div>\n  );\n};\n\nexport default Memu;\n","import React, { useState, useEffect } from \"react\";\nimport Memu from \"./Memu\";\nimport html2canvas, { downloadURI } from \"html2canvas\";\n\nconst MemeGenerator = () => {\n  const [memes, setMemes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentMeme, setCurrentMeme] = useState(\"\");\n  const [forms, setForms] = useState({\n    topText: \"\",\n    bottomText: \"\",\n    textSize: \"30\",\n  });\n\n  const randomNumber = (myMin, myMax) => {\n    return Math.floor(\n      Math.random() * (Math.ceil(myMax) - Math.floor(myMin) + 1) + myMin\n    );\n  };\n\n  const selectMeme = (meme_id) => {\n    memes.forEach((meme) => {\n      if (meme.id === meme_id) {\n        setCurrentMeme(meme);\n        window.scroll({\n          top: 0,\n          left: 0,\n          behavior: \"smooth\",\n        });\n      }\n    });\n  };\n\n  // Set memes state array through API call\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then((response) => response.json())\n      .then((response) => {\n        setMemes(response.data.memes);\n      });\n  }, []);\n\n  // Set Random meme image when API call is Done\n  useEffect(() => {\n    if (memes !== undefined || memes.length !== 0) {\n      setCurrentMeme(memes[randomNumber(0, memes.length - 1)]);\n    }\n  }, [memes]);\n\n  // Stop loading status when current meme is set\n  useEffect(() => {\n    if (typeof currentMeme === \"object\") {\n      setLoading(false);\n    }\n  }, [currentMeme]);\n\n  // Handle text input forms\n  const handleForm = (event) => {\n    const { name, value } = event.target;\n\n    if (name === \"textSize\") {\n      // Limit font size to 10 to 50\n      if (parseInt(value) <= 50 && parseInt(value) >= 10) {\n        setForms({\n          ...forms,\n          [name]: value,\n        });\n      }\n    } else {\n      setForms({\n        ...forms,\n        [name]: value,\n      });\n    }\n  };\n\n  // Generate meme image dowmload link\n  const saveAs = (uri, filename) => {\n    var link = document.createElement(\"a\");\n\n    if (typeof link.download === \"string\") {\n      link.href = uri;\n      link.download = filename;\n\n      document.body.appendChild(link);\n\n      link.click();\n\n      document.body.removeChild(link);\n    } else {\n      window.open(uri);\n    }\n  };\n\n  // Download meme as image\n  const saveMeme = () => {\n    const memeDiv = document.getElementById(\"image-div\");\n\n    html2canvas(memeDiv, {\n      useCORS: true,\n      scrollX: -window.scrollX,\n      scrollY: -window.scrollY,\n      windowWidth: document.documentElement.offsetWidth,\n      windowHeight: document.documentElement.offsetHeight,\n    }).then((canvas) => {\n      saveAs(canvas.toDataURL(), \"meme.png\");\n    });\n  };\n\n  if (!loading) {\n    return (\n      <div id=\"meme-gen-container\">\n        <div id=\"top-div\">\n          <h1 id=\"main-title\">MEME Generator</h1>\n        </div>\n\n        <div className=\"input-container\">\n          <label className=\"meme-label\">\n            Top text:\n            <input\n              className=\"meme-input\"\n              type=\"text\"\n              placeholder=\"Top text\"\n              name=\"topText\"\n              value={forms.topText}\n              onChange={handleForm}\n            />\n          </label>\n\n          <label className=\"meme-label\">\n            Bottom Text:\n            <input\n              className=\"meme-input\"\n              type=\"text\"\n              placeholder=\"Bottom text\"\n              name=\"bottomText\"\n              value={forms.bottomText}\n              onChange={handleForm}\n            />\n          </label>\n\n          <label className=\"meme-label\">\n            Font size:\n            <input\n              type=\"number\"\n              name=\"textSize\"\n              value={forms.textSize}\n              onChange={handleForm}\n              className=\"meme-input\"\n            />\n          </label>\n\n          <button className=\"ui-btn\" onClick={saveMeme}>\n            Download\n          </button>\n        </div>\n\n        <div id=\"image-div\">\n          <p\n            id=\"top-text\"\n            className=\"meme-text\"\n            style={{ fontSize: `${forms.textSize}px` }}\n          >\n            {forms.topText}\n          </p>\n\n          <p\n            id=\"bottom-text\"\n            className=\"meme-text\"\n            style={{ fontSize: `${forms.textSize}px` }}\n          >\n            {forms.bottomText}\n          </p>\n\n          <img\n            className=\"meme-image\"\n            src={currentMeme.url}\n            height={currentMeme.height}\n            width={currentMeme.width}\n            alt=\"meme\"\n          />\n        </div>\n\n        <Memu allMemes={JSON.stringify(memes)} sm={selectMeme} />\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"loading-div\">\n        <h1>LOADING...</h1>\n      </div>\n    );\n  }\n};\n\nexport default MemeGenerator;\n","import MemeGenerator from \"./components/MemeGenerator\";\n\nconst App = () => {\n  return (\n    <div>\n      <div className=\"background-div\"></div>\n      <MemeGenerator />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}